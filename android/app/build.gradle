plugins {
    id "com.android.application"
    id "kotlin-android"
    id "dev.flutter.flutter-gradle-plugin"
}

def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode', '1')
def flutterVersionName = localProperties.getProperty('flutter.versionName', '1.0')

// Custom flag to differentiate between Padelshooter 3A and Smart
def isSmartVersion = localProperties.getProperty('isSmartVersion', 'false').toBoolean()

android {
    namespace "com.example.padelshooter3a1"
    compileSdkVersion 34
    ndkVersion "21.3.6528147"

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    defaultConfig {
        applicationId "com.example.padelshooter3a1"
        minSdkVersion 21
        targetSdkVersion 34
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
        manifestPlaceholders = [applicationName: isSmartVersion ? "Padelshooter Smart" : "Padelshooter 3A"]
    }

    applicationVariants.all { variant ->
        variant.outputs.all { output ->
            def outputDir = new File("$buildDir/outputs/apk/${variant.buildType.name}")
            if (!outputDir.exists()) {
                outputDir.mkdirs()
            }
//            def newApkName = isSmartVersion ? "padelshooterSmart-${variant.buildType.name}.apk" : "padelshooter3a-${variant.buildType.name}.apk"
            def newApkName = "padelshooter3a.apk"

            output.outputFileName = newApkName
        }
    }

    buildTypes {
        release {
            signingConfig signingConfigs.debug
            minifyEnabled false
            shrinkResources false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
}

configurations.all {
    resolutionStrategy.eachDependency { details ->
        if (details.requested.group == 'org.jetbrains.kotlin') {
            details.useVersion "1.7.10"
        }
    }
}

flutter {
    source '../..'
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:1.7.10"
}
